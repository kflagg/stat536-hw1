\documentclass[11pt]{article}
\usepackage{fullpage}
\usepackage{graphicx}
\usepackage{float}
\usepackage{amsmath}
\usepackage{enumitem}
\setlist{parsep=5.5pt}
\setlength{\parindent}{0pt}

\usepackage{fancyhdr}
\pagestyle{fancy}
\lhead{Time Series HW 1}
\chead{September 2, 2016}
\rhead{Andrea Mack and Kenny Flagg}
\setlength{\headheight}{18pt}
\setlength{\headsep}{2pt}

\title{Time Series HW 1}
\author{Andrea Mack and Kenny Flagg}
\date{September 2, 2016}

\begin{document}
\maketitle

<<setup, echo = FALSE, message = FALSE, cache = FALSE>>=
require(knitr)
opts_chunk$set(echo = FALSE, comment = NA, fig.align = 'center',
               fig.width = 6.5, fig.height = 3, fig.pos = 'H',
               size = 'footnotesize', dev = 'pdf',
               dev.args = list(pointsize = 11))
knit_theme$set('print')

require(xtable)
options(xtable.table.placement = 'H', width = 80, show.signif.stars = FALSE)

require(car)
@


\section*{HW 1}

\begin{enumerate}

\item%1
{\it Read in the data set and use R to make a correct date code that separates year and month. There are many ways to do this. If you can't figure out how to do this using functions in R, you can do this outside R (say in Excel) or by some sort of hand coding of the date information but will get a small deduction in points for bypassing the challenge of doing this in an efficient way in R.}

<<one1, echo = TRUE>>=
rawbozemandata <- read.csv('rawbozemandata.csv', header = TRUE)

# A date without a day is NA, so make all these dates the first of the month.
rawbozemandata$date2 <- as.Date(paste0(rawbozemandata$DATE, '01'), '%Y%m%d')

# Fill the rest of the page because the plot for #2 doesn't fit here.
head(rawbozemandata, n = 24)
@

\item%2
{\it Plot the monthly mean maximum temperatures (\(y\)-axis) vs year (\(x\)-axis), labelling the axes with the name and units of each variable.}

(See page~\pageref{code:two1} for code.)

<<two1, fig.height = 5, fig.cap = 'Monthly mean maximum temperatures (MMXT) at the MSU weather station plotted over time. The faint grey line connects the monthly points to illustrate the periodic annual trend.'>>=
# Start with a light grey line to connect points through years.
plot(MMXT ~ date2, data = rawbozemandata, type = 'l', col = 'lightgrey',
     main = 'MMXT over time', xlab = 'Year', ylab = expression(MMXT~(degree*F)))

# Now points for the monthly observations.
points(MMXT ~ date2, data = rawbozemandata, pch = 19, cex = 0.5, col = 'black')
@

\pagebreak
\item%3
{\it Create a variable that is just the year of each observation and another for the month. Then fit a linear model with temperature as the response and year and month as explanatory variables treated correctly as either quantitative or categorical predictors. Do not consider any higher order model terms such as polynomials or interactions. For many reasons but especially for the following question, do any variable manipulations prior to fitting the
model and use the general code format for your lm of: \verb|model1<-lm(y~x1+x2,data=mydatasetname)|.}

Time is naturally quantitative and it makes sense to treat year as quantitative to capture long-term trends in MMXT (Figure~\ref{fig:two1} shows an increasing linear trend). The relationship between MMXT and month is not linear or simple---it is periodic---so I treat month as categorical.

(See page~\pageref{code:three1} for code.)

<<three1>>=
# Get the year and month.
rawbozemandata$year <- as.numeric(format(rawbozemandata$date2, '%Y'))
rawbozemandata$month <- format(rawbozemandata$date2, '%B')

# Make month into a factor with levels ordered by first appearance.
rawbozemandata$month <- factor(rawbozemandata$month,
                               levels = unique(rawbozemandata$month))

model1 <- lm(MMXT ~ year + month, data = rawbozemandata)
summary(model1)
@

\pagebreak
\item%4
{\it Install and load the effects package and run the following code to get effects (also better called termplots) of the model that you fit: \verb|plot(allEffects(model1))|. Discuss the month effect plot in general.}

As seen in Figure~\ref{fig:four1}, mean MMXT is higher in the summer months than in the winter months. Months that are close togther in the year have mean MMXTs that are more similar than the MMXT values of months that are far apart. For example, the difference in mean MMXT between July and January (six months apart) is larger than the difference in mean MMXT between July and August. Additionally, December and January have relatively similar mean MMXT values so that the monthly trend cycles from one year to then next. None of this is
surprising given what I learned about the seasons in elementary school.

<<four1, message = FALSE, fig.cap = 'Plots showing the estimated effect of year on MMXT (averaged over months) and the estimated effect of month on MMXT (averaged over years).'>>=
require(effects)
plot(allEffects(model1), rug = FALSE, cex = 0.75, rotx = 45)
@

\item%5
{\it For the ``year'' model component, interpret the estimated slope coefficient and report a 95\% confidence interval. Also note the size of the estimated change in the mean temperature over the entire length of the data set and report and confidence interval for that result.}

<<five1, results = 'asis'>>=
slope <- coef(model1)['year']
se <- summary(model1)$coefficients['year', 'Std. Error']
confintyear <- slope + qt(c(0.025, 0.975), model1$df) * se

nyears <- range(rawbozemandata$year) %*% c(-1, 1) # max(year) - min(year)
confintrange <- nyears * slope + qt(c(0.025, 0.975), model1$df) * nyears * se

cat('The mean MMXT increases by an estimated', signif(slope, 3),
    '\\(^\\circ\\)F each year. We are 95\\% confident that the true yearly',
    'increase is between', signif(confintyear[1], 3), '\\(^\\circ\\)F and',
    signif(confintyear[2], 3), '\\(^\\circ\\)F. Over the', nyears,
    'years for which we have data, this amounts to an expected',
    signif(nyears * slope, 3), '\\(^\\circ\\)F increase, with a 95\\%',
    'confidence interval of', signif(confintrange[1], 3), '\\(^\\circ\\)F to',
    signif(confintrange[2], 3), '\\(^\\circ\\)F.\n\n')
@

(See page~\pageref{code:five1} for the code that generated that paragraph!)

\pagebreak
\item%6
{\it Generate a test for the month model component, write out the hypotheses, report the results (extract any pertinent numerical results from output), and write a conclusion based on these results.}

<<six1>>=
anova1 <- Anova(model1, type = 3)
print(anova1)
@
\begin{align*}
H_0 &\text{: all month coefficients} = 0 \\
H_a &\text{: some month coefficient} \neq 0 \\
\end{align*}
<<six2, results = 'asis'>>=
cat('With \\(F_{', anova1['month','Df'], ',\\: ', anova1['Residuals','Df'],
    '} = ', signif(anova1['month','F value', 6]), '\\) (\\(\\text{p-value} ',
    ifelse(anova1['month','Pr(>F)'] < 0.0001, '< 0.0001',
           sprintf('= %.4f', anova1['month','Pr(>F)'])),
    '\\)) there is very strong evidence that, within a year,
the true mean MMXT differs by month.')
@

(See page~\pageref{code:six2} for code.)

\item%7
{\it Run the following code:}
<<seven1, eval = FALSE, echo = TRUE>>=
par(mfrow=c(2,2))
plot(model1)
@
{\it It should produce four panels with residuals vs fitted, normal Q-Q, scale-location, and residuals vs leverage plots. Only discuss the normal Q-Q plot. What model assumptions does this help us assess and what does it suggest here?}

%Chris Barbour told me to always use \texttt{add.smooth=FALSE}!

The normal Q-Q plot helps us assess whether the residuals can be approximated by a normal distribution. It shows the standardized residuals plotted against the standard normal quantiles, so if the residuals follow a normal distribution the plot would show a linear relationship. Most of the points are along the line, but the downward elbow in the lower left indicates that the distribution of residuals has a long left tail compared to a normal distribution. From this plot, it appears that the residual distribution is approximately normal but that there are some very cold observations that are poorly described by the model.

<<seven1, fig.height = 6.5, fig.cap = 'The four standard linear model diagnostic plots.'>>=
@

\end{enumerate}

\pagebreak
\appendix
\section*{R Code}

\begin{enumerate}

\item%1
\label{code:one1}
<<one1, eval = FALSE, echo = TRUE>>=
@

\item%2
\label{code:two1}
<<two1, eval = FALSE, echo = TRUE>>=
@

\item%3
\label{code:three1}
<<three1, eval = FALSE, echo = TRUE>>=
@

\item%4
\label{code:four1}
<<four1, eval = FALSE, echo = TRUE>>=
@

\item%5
\label{code:five1}
<<five1, eval = FALSE, echo = TRUE>>=
@

\item%6
\label{code:six1}
<<six1, eval = FALSE, echo = TRUE>>=
@
\label{code:six2}
<<six2, eval = FALSE, echo = TRUE>>=
@

\item%7
\label{code:seven1}
<<seven1, eval = FALSE, echo = TRUE>>=
@

\end{enumerate}

\end{document}
